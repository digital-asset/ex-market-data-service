--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.Utils where

import Daml.Script

import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Roles

createRelationship : Party -> ContractId OperatorRole -> Party -> Party
                  -> Script (ContractId PublisherConsumerRelationship, ContractId PublisherRole)
createRelationship operator operatorRole publisher consumer = do
  let p = Publisher with party = publisher
      c = Consumer with party = consumer
  (relationRequest, roleRequest) <- operator `submit` exerciseCmd operatorRole InvitePublisherConsumer with publisher = p, consumer = c
  publisherAccept <- publisher `submit` exerciseCmd relationRequest PublisherInvitation_Accept
  publisherRole <- publisher `submit` exerciseCmd roleRequest PublisherRoleInvitation_Accept
  relationship <- consumer `submit` exerciseCmd publisherAccept ConsumerInvitation_Accept
  return (relationship, publisherRole)

createDataStream : Party -> Party -> (ContractId PublisherConsumerRelationship, ContractId PublisherRole) ->
                   ObservationReference -> Time -> Time -> Int -> SubscriptionFee ->
                   Script SomeDataStream
createDataStream publisher consumer (relationship, pubRole) reference starting ending staleHours price = do
  request <- consumer `submit` exerciseCmd relationship RequestStream
    with reference, starting, ending, staleHours
  proposal <- publisher `submit` exerciseCmd request DataStreamRequest_Propose with price
  license <- consumer `submit` exerciseCmd proposal DataLicenseProposal_Accept
  publisher `submit` exerciseCmd pubRole RegisterLicense with licenseId = license

-- Might move into daml-stdlib
queryContractKey : forall t k. (TemplateKey t k, Eq k) => Party -> k -> Script (Optional (ContractId t, t))
queryContractKey p k =
  find (\(_, t) -> key t == k) <$>
  query @t p
