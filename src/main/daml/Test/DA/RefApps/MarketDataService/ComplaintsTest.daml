--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.ComplaintsTest where

import DA.Assert
import DA.TimeService.TimeService
import DA.Time as T

import Daml.Script

import DA.RefApps.MarketDataService.DataStream
import DA.RefApps.MarketDataService.DataLicense
import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Publication

import Test.DA.RefApps.MarketDataService.RolesTest
import Test.DA.RefApps.MarketDataService.Utils

testConsumerCanClaimNonPerformance : Script ()
testConsumerCanClaimNonPerformance = script do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  let
    afterStart = addRelTime now (hours 2)
    licenseKey = (Publisher mdVendorParty, Consumer endUserParty, reference)

  currentTime <- submit operator do
    exerciseCmd currentTimeCid UpdateCurrentTime with newCurrentTime = afterStart

  Some (licenseId, license) <- queryContractKey @RegisteredDataLicense endUserParty licenseKey
  nonPerformanceCid <- submit endUserParty do
    exerciseCmd licenseId RegisteredDataLicense_ClaimNonPerformance
  Some nonPerformance <- queryContractId endUserParty nonPerformanceCid
  nonPerformance.licenseData === license.licenseData
  nonPerformance.claimed === afterStart

  submitMustFail mdVendorParty $
    exerciseCmd mdvStreamId StartDataStream with
      newObservation = currentObservation

testConsumerCannotClaimNonPerformanceBeforeStart : Script ()
testConsumerCannotClaimNonPerformanceBeforeStart = script do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  let
    licenseKey = (Publisher mdVendorParty, Consumer endUserParty, reference)

  Some (licenseId, _) <- queryContractKey @RegisteredDataLicense endUserParty licenseKey

  submitMustFail endUserParty do
    exerciseCmd licenseId RegisteredDataLicense_ClaimNonPerformance

testConsumerCanClaimStalePublication : Script ()
testConsumerCanClaimStalePublication = script do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer endUserParty, reference)
    afterStale = addRelTime now (hours (staleHours + 1))
    someCleanValue = CleanPrice with clean = 4.0


  mdvStreamId <- submit mdVendorParty do
    exerciseCmd mdvStreamId StartDataStream with
      newObservation = currentObservation
  submit mdVendorParty do
    exerciseCmd mdvStreamId UpdateObservation with
      time = now
      newValue = someCleanValue

  submit operator do
    exerciseCmd currentTimeCid UpdateCurrentTime with newCurrentTime = afterStale

  Some (licenseId, license) <- queryContractKey @LiveStreamLicense endUserParty lookupKey
  Some (publicationId, publication) <- queryContractKey @Publication endUserParty lookupKey
  stalePublicationCid <-  submit endUserParty do
    exerciseCmd licenseId ClaimStale with publicationId
  Some stalePublication <- queryContractId endUserParty stalePublicationCid
  stalePublication.licenseData === license.licenseData
  stalePublication.publication === publication
  stalePublication.claimed === afterStale

testConsumerCannotClaimStalePublicationBeforeStaleTime : Script ()
testConsumerCannotClaimStalePublicationBeforeStaleTime = script do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer endUserParty, reference)
    beforeStale = addRelTime now (hours (staleHours - 1))
    someCleanValue = CleanPrice with clean = 4.0

  mdvStreamId <- submit mdVendorParty do
    exerciseCmd mdvStreamId StartDataStream with
      newObservation = currentObservation
  submit mdVendorParty do
    exerciseCmd mdvStreamId UpdateObservation with
      time = now
      newValue = someCleanValue

  submit operator do
    exerciseCmd currentTimeCid UpdateCurrentTime with newCurrentTime = beforeStale

  Some (licenseId, _) <- queryContractKey @LiveStreamLicense endUserParty lookupKey
  Some (publicationId, _) <- queryContractKey @Publication endUserParty lookupKey

  submitMustFail endUserParty do
    exerciseCmd licenseId ClaimStale with publicationId
