--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.MarketSetupTest where

import DA.Time as T
import DA.TimeService.TimeService

import Daml.Script

import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.DataLicense
import DA.RefApps.MarketDataService.Roles

marketSetupScript : Script ()
marketSetupScript = script do
  operator <- allocateParty "Operator"
  marketDataProvider1Party <- allocateParty "MarketDataProvider1"
  marketDataProvider2Party <- allocateParty "MarketDataProvider2"
  marketDataVendorParty <- allocateParty "MarketDataVendor"
  analyticsVendorParty <- allocateParty "AnalyticsVendor"
  endUserParty <- allocateParty "EndUser"
  let starting = addRelTime appStartTime (hours 1)
      ending = addRelTime appStartTime (days 10)
      staleHours = 3
      reference1 = ObservationReference
          with
              market = bond1Market
              instrumentId = bond1
              maturityDate = bondMaturity bond1Info
      reference2 = ObservationReference
          with
              market = bond2Market
              instrumentId = bond2
              maturityDate = bondMaturity bond2Info

  debug "Creating current time"
  currentTimeCid <- submit operator do
    createCmd CurrentTime with
      operator = operator
      currentTime = appStartTime
      observers = [marketDataProvider1Party, marketDataProvider2Party, marketDataVendorParty, analyticsVendorParty, endUserParty]

  debug "Creating time configuration"
  timeConfigurationCid <- submit operator do
    createCmd TimeConfiguration with
      operator = operator
      isRunning = False
      modelPeriodTime = hours 2

  debug "Creating time manager"
  timeManagerCid <- submit operator do
    createCmd TimeManager with
            operator = operator

  debug "Creating operator role"
  operatorRole <- submit operator $ createCmd (OperatorRole with operator = operator)

  debug "Loading CSV data sources"
  providerRoleInvitation <- operator `submit` exerciseCmd operatorRole
    InviteMarketDataProvider with marketDataProvider = marketDataProvider1Party
  mdp1ProviderRole <- marketDataProvider1Party `submit` exerciseCmd providerRoleInvitation MarketDataProviderInvitation_Accept
  marketDataProvider1Party `submit` exerciseCmd mdp1ProviderRole
    LoadCsvDataFromPath with
      reference = reference1
      path = "default-1.csv"

  providerRoleInvitation <- operator `submit` exerciseCmd operatorRole
    InviteMarketDataProvider with marketDataProvider = marketDataProvider2Party
  mdp2ProviderRole <- marketDataProvider2Party `submit` exerciseCmd providerRoleInvitation MarketDataProviderInvitation_Accept
  marketDataProvider2Party `submit` exerciseCmd mdp2ProviderRole
    LoadCsvDataFromPath with
        reference = reference2
        path = "default-1000.csv"

  debug "Creating relationships"
  mdp1MdvRelation <- createRelationship operator operatorRole marketDataProvider1Party marketDataVendorParty
  mdp2MdvRelation <- createRelationship operator operatorRole marketDataProvider2Party marketDataVendorParty
  mdvAnvRelation <- createRelationship operator operatorRole marketDataVendorParty analyticsVendorParty
  mdvConRelation <- createRelationship operator operatorRole marketDataVendorParty endUserParty
  anvConRelation <- createRelationship operator operatorRole analyticsVendorParty endUserParty

  debug "Creating data streams"
  createDataStream marketDataProvider1Party marketDataVendorParty mdp1MdvRelation reference1 starting ending staleHours
  createDataStream marketDataProvider2Party marketDataVendorParty mdp2MdvRelation reference2 starting ending staleHours
  createDataStream marketDataVendorParty analyticsVendorParty mdvAnvRelation reference1 starting ending staleHours
  createDataStream marketDataVendorParty endUserParty mdvConRelation reference1 starting ending staleHours
  createDataStream analyticsVendorParty endUserParty anvConRelation reference1 starting ending staleHours
  pure ()

createDataStream : Party -> Party -> (ContractId PublisherConsumerRelationship, ContractId PublisherRole) ->
                   ObservationReference -> Time -> Time -> Int ->
                   Script (ContractId DataLicense)
createDataStream publisher consumer (relationship, pubRole) reference starting ending staleHours = do
  let price = SubscriptionFee 10.000
  debug ("Creating data stream: publisher=" <> (show publisher) <> ", consumer=" <> (show consumer))
  request <- consumer `submit` exerciseCmd relationship RequestStream
    with reference, starting, ending, staleHours
  proposal <- publisher `submit` exerciseCmd request DataStreamRequest_Propose with price
  license <- consumer `submit` exerciseCmd proposal DataLicenseProposal_Accept
  stream <- publisher `submit` exerciseCmd pubRole RegisterLicense with licenseId = license
  debug "Created data stream."
  pure license

createRelationship : Party -> ContractId OperatorRole -> Party -> Party
                    -> Script (ContractId PublisherConsumerRelationship, ContractId PublisherRole)
createRelationship operator operatorRole publisher consumer = do
  let p = Publisher with party = publisher
      c = Consumer with party = consumer
  debug ("Creating relationship: publisher=" <> (show publisher) <> ", consumer=" <> (show consumer))
  (relationRequest, roleRequest) <- operator `submit` exerciseCmd operatorRole InvitePublisherConsumer with publisher = p, consumer = c
  publisherAccept <- publisher `submit` exerciseCmd relationRequest PublisherInvitation_Accept
  publisherRole <- publisher `submit` exerciseCmd roleRequest PublisherRoleInvitation_Accept
  relationship <- consumer `submit` exerciseCmd publisherAccept ConsumerInvitation_Accept
  debug "Created relationship."
  pure (relationship, publisherRole)