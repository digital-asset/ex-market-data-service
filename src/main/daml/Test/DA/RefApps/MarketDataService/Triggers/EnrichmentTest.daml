--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.Triggers.EnrichmentTest where

import DA.Assert
import DA.Date
import DA.Next.Map
import DA.Time as T
import Daml.Script
import Daml.Trigger.Assert

import DA.TimeService.TimeService
import DA.RefApps.MarketDataService.DataStream
import DA.RefApps.MarketDataService.Publication
import DA.RefApps.MarketDataService.Triggers.Enrichment
import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Roles
import Test.DA.RefApps.MarketDataService.MarketSetupTest
import Test.DA.RefApps.MarketDataService.Utils (queryContractKey)

coupons : [Date]
coupons = [date 2019 Feb 20, date 2020 Feb 20]

testNextCouponDateAfter : Script ()
testNextCouponDateAfter = script do
  Some (date 2019 Feb 20) === nextCouponDateAfter (date 2019 Jan 20) coupons
  Some (date 2020 Feb 20) === nextCouponDateAfter (date 2020 Jan 20) coupons
  None === nextCouponDateAfter (date 2021 Jan 20) coupons

testAccruedInterestBetween : Script ()
testAccruedInterestBetween = script do
  0.0 === accruedInterestBetween (date 2020 Feb 20) (date 2020 Feb 20) 1.0
  1.0/365.0 === accruedInterestBetween (date 2020 Feb 19) (date 2020 Feb 20) 1.0
  31.0/365.0 === accruedInterestBetween (date 2020 Jan 20) (date 2020 Feb 20) 1.0
  364.0/365.0 === accruedInterestBetween (date 2019 Feb 21) (date 2020 Feb 20) 1.0
  1.0 === accruedInterestBetween (date 2019 Feb 20) (date 2020 Feb 20) 1.0

testAccruedInterest : Script ()
testAccruedInterest = script do
  let
    bond = BondInfo
      with
        rate = 1.0
        couponDates = coupons
    accrued = accruedInterest (date 2020 Jan 20) bond
    daysPassed = subDate (date 2020 Jan 20) (date 2019 Feb 20)
  assertMsg "calculation cannot handle leap years" $ 365 == subDate (date 2020 Feb 20) (date 2019 Feb 20)
  accrued === (intToDecimal daysPassed)/365.0

testReference : ObservationReference
testReference = ObservationReference with
  market = "Test Market"
  instrumentId = InstrumentId "Test Reference"
  maturityDate = date 1997 Aug 29

observationHasNotChangedWhenValuesAreEqual : Script ()
observationHasNotChangedWhenValuesAreEqual = script do
  let o = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 1.0
  False === observationHasChanged o o

observationHasNotChangedWhenTimeRemains : Script ()
observationHasNotChangedWhenTimeRemains = script do
  let o1 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 1.0
      o2 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 2.0
  False === observationHasChanged o1 o2

observationHasNotChangedWhenTimeIsOlderAndValueChanged : Script ()
observationHasNotChangedWhenTimeIsOlderAndValueChanged = script do
  let o1 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 1.0
      o2 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 1) 12 23 45
        value = CleanPrice with clean = 2.0
  False === observationHasChanged o1 o2

observationHasChangedWhenTimeIsNewerAndValueRemains : Script ()
observationHasChangedWhenTimeIsNewerAndValueRemains = script do
  let o1 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 1.0
      o2 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 24) 12 23 45
        value = CleanPrice with clean = 1.0
  True === observationHasChanged o1 o2

observationHasChangedWhenTimeIsNewerAndValueChanged : Script ()
observationHasChangedWhenTimeIsNewerAndValueChanged = script do
  let o1 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 4) 12 23 45
        value = CleanPrice with clean = 1.0
      o2 = Observation with
        label = testReference
        time = T.time (date 1997 Aug 24) 12 23 45
        value = CleanPrice with clean = 2.0
  True === observationHasChanged o1 o2

-- fixing ERA-712
publicationRuleEmitsOnlyOneExerciseCommandPerDataStream: Script ()
publicationRuleEmitsOnlyOneExerciseCommandPerDataStream = script do
  operator <- allocateParty "Operator"
  marketDataVendor <- allocateParty "MarketDataVendor"
  marketDataProvider1 <- allocateParty "MarketDataProvider1"
  marketDataProvider2 <- allocateParty "MarketDataProvider2"
  analyticsVendor <- allocateParty "AnalyticsVendor"

  let
    starting = addRelTime appStartTime (hours 1)
    ending = addRelTime appStartTime (days 10)
    staleHours = 3
    published = T.time (date 1997 Aug 4) 12 23 45
    usReference =
      ObservationReference with
        market = bond1Market
        instrumentId = bond1
        maturityDate = bondMaturity bond1Info
    euReference =
      ObservationReference with
        market = bond2Market
        instrumentId = bond2
        maturityDate = bondMaturity bond2Info
    euObservation =
      Observation with
        label = euReference
        time = published
        value = CleanPrice with clean = 3.0
    usObservation =
      Observation with
        label = usReference
        time = published
        value = CleanPrice with clean = 3.0

  currentTimeCid <- submit operator do
    createCmd CurrentTime with
      operator = operator
      currentTime = appStartTime
      observers = [marketDataVendor]

  operatorRole <- submit operator $ createCmd (OperatorRole with operator = operator)
  mdvAnvRelation <- createRelationship operator operatorRole marketDataVendor analyticsVendor
  createDataStream marketDataVendor analyticsVendor mdvAnvRelation usReference starting ending staleHours
  Some (edsUsCid, _) <- queryContractKey @EmptyDataStream marketDataVendor (Publisher marketDataVendor, usReference)
  dataStreamUs <- submit marketDataVendor do
    exerciseCmd edsUsCid StartDataStream with newObservation = usObservation

  publicationUs <- submit marketDataProvider1 do
    createCmd Publication
      with
        observation = usObservation
        publisher = Publisher marketDataProvider1
        consumer = Consumer marketDataVendor
        published
        operator

  publicationEu <- submit marketDataProvider2 do
    createCmd Publication
      with
        observation = euObservation
        publisher = Publisher marketDataProvider2
        consumer = Consumer marketDataVendor
        published
        operator


  currentTime <- submit operator do
    exerciseCmd currentTimeCid (AdvanceByCurrentTime $ hours 1)
  let
    activeContracts = toACS currentTime <> toACS dataStreamUs <> toACS publicationEu <> toACS publicationUs
    commandsInFlight = DA.Next.Map.empty
  commands <- testRule
                enrichCleanPriceWithAccrualTrigger
                marketDataVendor
                activeContracts
                commandsInFlight
                ()
  let flatCommands = flattenCommands commands

  length commands === length [dataStreamUs] -- 1 datastream results in at most 1 command
  assertExerciseCmd flatCommands $ \(cid, choiceArg) -> do
    assertEq cid dataStreamUs
    assertEq choiceArg (UpdateLicenses)
