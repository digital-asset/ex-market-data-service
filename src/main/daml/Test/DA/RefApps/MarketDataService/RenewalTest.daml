--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.RenewalTest where

import DA.Assert
import DA.TimeService.TimeService
import DA.Time as T
import Daml.Script

import DA.RefApps.MarketDataService.DataStream
import DA.RefApps.MarketDataService.MarketDataTypes

import Test.DA.RefApps.MarketDataService.RolesTest
import Test.DA.RefApps.MarketDataService.Utils

testLicenseRenewal : Script ()
testLicenseRenewal = script do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  mdvStreamId <- submit mdVendorParty $
    exerciseCmd mdvStreamId StartDataStream with
      newObservation = currentObservation

  let
    newEnding = addRelTime afterExpiry (days 1)
    staleHours = 3
    someCleanValue = CleanPrice with clean = 4.0
  currentTime <- submit operator do
    exerciseCmd currentTimeCid UpdateCurrentTime with newCurrentTime = afterExpiry

  mdvStreamId <- submit mdVendorParty do
    exerciseCmd mdvStreamId UpdateObservation with
      time = now
      newValue = someCleanValue
  Some mdvStream <- queryContractId mdVendorParty mdvStreamId
  mdvStream.consumers === []

  createDataStream
    mdVendorParty endUserParty mdvCon1Relation
    reference afterExpiry newEnding staleHours (SubscriptionFee 10.000)

  let
    lookupKey = (Publisher mdVendorParty, reference)
    newObservationValue = someCleanValue

  Some (renewedStreamId, _) <- queryContractKey @DataStream mdVendorParty lookupKey
  renewedStreamId <- submit mdVendorParty do
    exerciseCmd renewedStreamId UpdateObservation with
      time = now
      newValue = newObservationValue
  Some renewedStream <- queryContractId mdVendorParty renewedStreamId
  renewedStream.consumers === [Consumer endUserParty]
  renewedStream.observation.value === newObservationValue
