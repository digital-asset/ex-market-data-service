--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE ApplicativeDo #-}
module Test.DA.TimeService.TimeServiceTest where

import DA.Time
import DA.Date
import DA.Assert
import DA.TimeService.TimeService
import Daml.Script

data TestData = TestData with
  operator: Party
  alice: Party
  now: Time
  later: Time
  modelPeriodTime: RelTime
  currentTime: ContractId CurrentTime
  configuration: ContractId TimeConfiguration
  manager: ContractId TimeManager

setupTimeTestWithAlice : Script TestData
setupTimeTestWithAlice = script do
  operator <- allocateParty "Operator"
  alice <- allocateParty "Alice"
  let
    today = date 2019 Nov 12
    now = time today 14 57 0
    modelPeriodTime = hours 1
    later = addRelTime now modelPeriodTime
  now =/= later
  currentTime <- submit operator do
    createCmd CurrentTime with
      operator = operator
      currentTime = now
      observers = [alice]
  configuration <- submit operator do
    createCmd TimeConfiguration with
      operator = operator
      isRunning = True
      modelPeriodTime
  manager <- submit operator do
    createCmd TimeManager with
      operator = operator
  return TestData with ..

testTwoConcurrentTimeServicesWithDifferentKeysShowDifferentTime : Script ()
testTwoConcurrentTimeServicesWithDifferentKeysShowDifferentTime = script do
  testData <- setupTimeTestWithAlice
  operatorForBob <- allocateParty "OperatorForBob"
  bob <- allocateParty "Bob"
  let
    operatorForAlice = testData.operator
    timeAlice = testData.now
    timeBob = testData.later
  timeAlice =/= timeBob

  submit operatorForBob do
    createCmd CurrentTime with
      operator = operatorForBob
      currentTime = timeBob
      observers = [bob]

  t <- submit testData.alice do
    exerciseByKeyCmd @CurrentTime operatorForAlice (GetCurrentTime testData.alice)

  t === timeAlice

  t <- submit bob do
    exerciseByKeyCmd @CurrentTime operatorForBob (GetCurrentTime bob)
  t === timeBob

testTimeNowWorksForEveryObserver : Script ()
testTimeNowWorksForEveryObserver = script do
  testData <- setupTimeTestWithAlice

  bob <- allocateParty "Bob"
  currentTime <- submit testData.operator do
    exerciseCmd testData.manager AddObserver with newObserver = bob

  t <- submit testData.alice do
    exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.alice)
  t === testData.now

  t <- submit bob do
    exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime bob)
  t === testData.now

  submit testData.operator do
    exerciseCmd testData.manager AdvanceCurrentTime

  t <- submit testData.alice do
    exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.alice)
  t === testData.later

  t <- submit bob do
    exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime bob)
  t === testData.later

testTimeCannotBeCreatedByOthers : Script ()
testTimeCannotBeCreatedByOthers = script do
  operator <- allocateParty "Operator"
  alice <- allocateParty "Alice"
  let
    currentTime = time (date 2019 Nov 12) 14 57 0

  submitMustFail alice do
    createCmd CurrentTime with
      operator
      currentTime
      observers = []

testTimeCannotBeManipulatedByOthers : Script ()
testTimeCannotBeManipulatedByOthers = script do
  testData <- setupTimeTestWithAlice
  submitMustFail testData.alice do
    exerciseCmd testData.currentTime UpdateCurrentTime with newCurrentTime = testData.later
  submitMustFail testData.alice do
    exerciseCmd testData.manager SetCurrentTime with newCurrentTime = testData.later

testTimeNotAdvancesWhenStopped : Script ()
testTimeNotAdvancesWhenStopped = script do
  testData <- setupTimeTestWithAlice

  t <- submit testData.operator do
    exerciseCmd testData.manager Stop
    exerciseCmd testData.manager AdvanceCurrentTime
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === testData.now

testTimeCanBeContinued : Script ()
testTimeCanBeContinued = script do
  testData <- setupTimeTestWithAlice

  t <- submit testData.operator do
    exerciseCmd testData.manager Stop
    exerciseCmd testData.manager Continue
    exerciseCmd testData.manager AdvanceCurrentTime
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === testData.later

testSetModelPeriodTime : Script ()
testSetModelPeriodTime = script do
  testData <- setupTimeTestWithAlice
  let
    newModelPeriodTime = minutes 45
    someOtherTime = addRelTime testData.now newModelPeriodTime

  t <- submit testData.operator do
    exerciseCmd testData.manager SetModelPeriodTime with
      newModelPeriodTime = newModelPeriodTime
    exerciseCmd testData.manager AdvanceCurrentTime
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === someOtherTime

testModelTimeAdvancesContinually : Script ()
testModelTimeAdvancesContinually = script do
  testData <- setupTimeTestWithAlice
  let
    someTime = addRelTime testData.now testData.modelPeriodTime
    afterSomeTime = addRelTime someTime testData.modelPeriodTime

  t <- submit testData.operator do
    exerciseCmd testData.manager AdvanceCurrentTime
    exerciseCmd testData.manager AdvanceCurrentTime
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === afterSomeTime

testTimeContractIsUnique : Script ()
testTimeContractIsUnique = script do
  testData <- setupTimeTestWithAlice

  submitMustFail testData.operator do
    createCmd CurrentTime with
      operator = testData.operator
      currentTime = testData.now
      observers = []

testUpdateCurrentTime : Script ()
testUpdateCurrentTime = script do
  testData <- setupTimeTestWithAlice

  t <- submit testData.operator do
    exerciseCmd testData.currentTime UpdateCurrentTime with newCurrentTime = testData.later
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === testData.later

testSetCurrentTime : Script ()
testSetCurrentTime = script do
  testData <- setupTimeTestWithAlice

  t <- submit testData.operator do
    exerciseCmd testData.manager SetCurrentTime with newCurrentTime = testData.later
    t <- exerciseByKeyCmd @CurrentTime testData.operator (GetCurrentTime testData.operator)
    pure t
  t === testData.later
