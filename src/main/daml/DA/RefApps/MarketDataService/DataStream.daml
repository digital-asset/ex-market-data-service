--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.MarketDataService.DataStream where

import DA.Foldable
import DA.TimeService.TimeService
import DA.Action

import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Publication
import DA.RefApps.MarketDataService.DataLicense

template EmptyDataStream
  with
    operator: Party
    reference: ObservationReference
    consumers: [Consumer]
    publisher: Publisher
    -- no need to store observation values to publish
  where
    signatory publisher.party, operator

    key (publisher, reference): (Publisher, ObservationReference)
    maintainer key._1.party

    controller publisher.party, operator can
      AddConsumer: ContractId EmptyDataStream
        with dataLicenseId: ContractId DataLicense
        do
          dataLicense <- fetch dataLicenseId
          assert $ dataLicense.licenseData.reference == reference
          let consumer = dataLicense.licenseData.consumer
          exercise dataLicenseId DataLicense_ClaimRegistered
          create this with consumers = consumer :: consumers

    controller publisher.party can
      StartDataStream: ContractId DataStream
        with
          newObservation: Observation
        do
          assert $ newObservation.label == reference
          now <- fetchTime operator
          forA_ consumers
            \consumer -> do
              let lookupKey = (publisher, consumer, reference)
              oldPublicationIdOpt <- lookupByKey @Publication lookupKey
              (dataLicenseId, dataLicense) <- fetchByKey @RegisteredDataLicense lookupKey
              isExpired <- checkIsExpired operator dataLicense.licenseData
              let expirationErr = "Cannot start data stream: license is expired, reference: " <>
                                    show newObservation.label <>
                                    ", license ID: " <>
                                    show dataLicenseId
              assertMsg expirationErr $ not isExpired
              exercise dataLicenseId RegisteredDataLicense_BeginStreaming
              case oldPublicationIdOpt of
                    Some oldPublicationId -> do
                      exercise oldPublicationId Republish with newObservation
                    None -> do
                      create Publication with
                        observation = newObservation
                        published = now
                        ..
          create DataStream with
            observation = newObservation
            published = now
            lastUpdated = now
            ..

-- observation values have to be stored in order to publish them to new subscribers
template DataStream
  with
    observation: Observation
    consumers: [Consumer]
    publisher: Publisher
    published: Time
    operator: Party
    lastUpdated: Time
  where
    signatory publisher.party, operator

    key (publisher, observation.label): (Publisher, ObservationReference)
    maintainer key._1.party

    controller publisher.party can
      AddConsumerDuringOperations: ContractId DataStream
        with dataLicenseId: ContractId DataLicense
        do
          dataLicense <- fetch dataLicenseId
          assert $ dataLicense.licenseData.reference == observation.label
          let consumer = dataLicense.licenseData.consumer
          registeredDataLicenseId <- exercise dataLicenseId DataLicense_ClaimRegistered
          exercise registeredDataLicenseId RegisteredDataLicense_BeginStreaming
          create Publication with observation, publisher, consumer, published, operator
          create this with consumers = consumer :: consumers

      UpdateObservation: ContractId DataStream
        with
          time: Time
          newValue: ObservationValue
        do
          let newObservation = observation with time, value = newValue
          liveAndExpired <- forA consumers $ getLiveOrExpired operator publisher observation.label
          let (live, expired) = partition isLive liveAndExpired
          forA_ live $ republish newObservation
          forA_ expired expire
          let newConsumers = map liveConsumer live
          currentTime <- fetchTime operator
          create this with observation = newObservation, published = currentTime, lastUpdated = currentTime, consumers = newConsumers

      UpdateLicenses: ContractId DataStream
        do
          currentTime <- fetchTime operator
          liveAndExpired <- forA consumers $ getLiveOrExpired operator publisher observation.label
          let (live, expired) = partition isLive liveAndExpired
          forA_ expired expire
          let newConsumers = map liveConsumer live
          create this with consumers = newConsumers, lastUpdated = currentTime

data LiveOrExpired =
    Live {
      livePublication : ContractId Publication,
      liveConsumer : Consumer
    } |
    Expired {
      expiredPublication : ContractId Publication,
      expiredLicense : ContractId LiveStreamLicense
    } deriving (Show)

republish : Observation -> LiveOrExpired -> Update ()
republish newObservation (Live oldPublicationId consumer) =
  void $ exercise oldPublicationId Republish with newObservation
republish _ _ = error "Republish called for Expired Publication."

expire : LiveOrExpired -> Update ()
expire e@(Expired oldPublicationId licenseKey) = do
  exercise oldPublicationId Close
  exercise licenseKey ExpireLicense
expire _ = error "Expire called for Live Publication."

isLive : LiveOrExpired -> Bool
isLive (Live _ _) = True
isLive _ = False

getLiveOrExpired
  : Party -> Publisher -> ObservationReference -> Consumer -> Update LiveOrExpired
getLiveOrExpired operator publisher observationLabel consumer = do
  (licenseKey, license) <- fetchByKey @LiveStreamLicense lookupKey
  (oldPublicationId, _) <- fetchByKey @Publication lookupKey
  isExpired <- checkIsExpired' license
  if isExpired
    then
      pure $ Expired oldPublicationId licenseKey
    else
      pure $ Live oldPublicationId consumer
 where
  lookupKey = (publisher, consumer, observationLabel)
  checkIsExpired' (LiveStreamLicense licenseData _began) =
      checkIsExpired operator licenseData

checkIsExpired : Party -> LicenseData -> Update Bool
checkIsExpired operator licenseData = do
  currentTime <- fetchTime operator
  pure $ isLicenseExpired licenseData currentTime
